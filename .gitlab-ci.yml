stages:
  - build-toolchain
  - build-cviwrapper
  - build-runtime

variables:
  TOOLCHAIN_IMAGE: $CI_REGISTRY/zeroth-robotics/openlch/openlch-runtime-sdk
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_PATHS: runtime/firmware/tpu-sdk-sg200x runtime/firmware/duo-sdk

.runner: &runner
  tags: 
    - linux-x64

build-toolchain:
  <<: *runner
  stage: build-toolchain
  services:
    - docker:dind
  image: docker:latest
  
  script:
      - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
      - docker pull $TOOLCHAIN_IMAGE:latest || true
      - docker build --progress=plain --cache-from $TOOLCHAIN_IMAGE:latest -t $TOOLCHAIN_IMAGE:latest -f runtime-sdk/Dockerfile .
      - docker push $TOOLCHAIN_IMAGE:latest
  rules:
    - changes:
        - runtime-sdk/**/*
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

build-cviwrapper:
  <<: *runner
  stage: build-cviwrapper
  image: $TOOLCHAIN_IMAGE:latest
  variables:
    TOOLCHAIN_PREFIX: /sdk/host/bin/riscv64-buildroot-linux-musl-
    SYSROOT: /sdk/host/riscv64-buildroot-linux-musl/sysroot
    CFLAGS: -mcmodel=medany -mabi=lp64d
    LDFLAGS: -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
    TPU_SDK_DIR: ../tpu-sdk-sg200x
  script:
    - cd runtime/firmware/cviwrapper
    - make
  artifacts:
    paths:
      - runtime/firmware/cviwrapper/libcviwrapper.so
    expire_in: 1 week
  rules:
    - changes:
      - runtime/firmware/cviwrapper/**/*
      - runtime/firmware/tpu-sdk-sg200x/**/*

build-runtime:
  <<: *runner
  stage: build-runtime
  image: $TOOLCHAIN_IMAGE:latest
  script:
    - cd runtime
    - source /root/.cargo/env
    - cargo +nightly build --target riscv64gc-unknown-linux-musl -Zbuild-std --release
  artifacts:
    paths:
      - runtime/target/riscv64gc-unknown-linux-musl/release/stompymicro
    expire_in: 1 week
  rules:
    - changes:
      - runtime/**/*
